pipeline {
    agent any
    tools {
        maven 'mvn'
        jdk 'jdk17'
    }
    environment {
        DATE = new Date().format('yy.M')
        //currently latest tag image being used for overwriting new image creations
      //  TAG = "${DATE}.${BUILD_NUMBER}"
        DOCKERHUB_CREDENTIALS = credentials('docker_cred_id')
    }
    stages {
        stage('Checkout') {
            steps {
                sh 'echo passed'
                git branch: 'main', credentialsId: 'github-id', url: 'https://github.com/parthcs-secondary/Expense-Tracker-Fullstack.git'
            }
        }
        stage('Backend: mvn Build and Test') {
            steps {
                sh 'cd ./back-end/. && ls && mvn clean package -DskipTests'
                // sh 'cd ./back-end/. && ls'
                // sh 'mvn clean package'
            }
        }
        stage("Backend: Build Docker image") {
            steps {
                sh 'cd ./back-end/. && docker build . -t parthkarad/expense-tracker-backend-v2'
            }
        }
        stage("Backend: Push image to Dockerhub") {
            steps {
                sh 'docker logout'
                sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
                sh 'docker push parthkarad/expense-tracker-backend-v2'
            }
        }
        // stage('Write') {
        //     steps {
        //         script {
        //             writeFile file: '.env', text: 'TAG=' + env.TAG
        //         }
        //     }
        // }
        stage("Frontend: Build Docker image") {
            steps {
                sh 'cd ./front-end/. && docker build . -t parthkarad/expense-tracker-frontend-v2'
            }
        }
        stage("Frontend: Push image to Dockerhub") {
            steps {
                sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
                sh 'docker push parthkarad/expense-tracker-frontend-v2'
            }
        }
        stage("Taking older application down"){
            steps{
                sh 'cd ./back-end/. && docker compose down'
            }
        }
        stage("Bringing new application up") {
            steps {
                // catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                //     sh "docker network rm expense"
                // }
                // sh "docker network create expense"
                // sh "docker compose --env-file ./.env up --force-recreate --detach"
                sh "cd ./back-end/. && docker compose up --detach"
            }
        }
    }
}